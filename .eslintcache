[{"C:\\Dev\\Rosite\\client\\src\\App.tsx":"1","C:\\Dev\\Rosite\\client\\src\\components\\coins\\CoinsTable.tsx":"2","C:\\Dev\\Rosite\\client\\src\\components\\spinner\\SpinnerComponent.js":"3","C:\\Dev\\Rosite\\client\\src\\components\\spinner\\SpinnerComponent.styles.tsx":"4","C:\\Dev\\Rosite\\client\\src\\components\\exchanges\\Exchanges.tsx":"5","C:\\Dev\\Rosite\\client\\src\\index.tsx":"6","C:\\Dev\\Rosite\\client\\src\\reportWebVitals.ts":"7","C:\\Dev\\Rosite\\client\\src\\components\\charts\\linechart\\Linechart.jsx":"8","C:\\Dev\\Rosite\\client\\src\\components\\charts\\useChartConfig.jsx":"9","C:\\Dev\\Rosite\\client\\src\\components\\navbar\\navbar.js":"10","C:\\Dev\\Rosite\\client\\src\\components\\coins\\Table.jsx":"11","C:\\Dev\\Rosite\\client\\src\\components\\exchanges\\Table.jsx":"12","C:\\Dev\\Rosite\\client\\src\\components\\charts\\linechart\\Table.jsx":"13"},{"size":758,"mtime":1610066130841,"results":"14","hashOfConfig":"15"},{"size":4175,"mtime":1610066695540,"results":"16","hashOfConfig":"15"},{"size":387,"mtime":1610046743678,"results":"17","hashOfConfig":"18"},{"size":675,"mtime":1610044127851,"results":"19","hashOfConfig":"15"},{"size":4530,"mtime":1610066710118,"results":"20","hashOfConfig":"15"},{"size":559,"mtime":1610065169508,"results":"21","hashOfConfig":"15"},{"size":425,"mtime":1610043569210,"results":"22","hashOfConfig":"15"},{"size":6286,"mtime":1610109273074,"results":"23","hashOfConfig":"15"},{"size":4609,"mtime":1610050057754,"results":"24","hashOfConfig":"15"},{"size":1534,"mtime":1610060878690,"results":"25","hashOfConfig":"15"},{"size":2730,"mtime":1610064505687,"results":"26","hashOfConfig":"15"},{"size":2933,"mtime":1610065573940,"results":"27","hashOfConfig":"15"},{"size":2871,"mtime":1610070061437,"results":"28","hashOfConfig":"15"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"32"},"g17kul",{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"kxc7w9",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},"C:\\Dev\\Rosite\\client\\src\\App.tsx",["64"],"import React, { useState } from 'react';\nimport {\n\tBrowserRouter as Router,\n\tSwitch,\n\tRoute,\n} from \"react-router-dom\";\nimport CoinsTable from './components/coins/CoinsTable';\nimport Exchanges from './components/exchanges/Exchanges';\nimport LineChart from './components/charts/linechart/Linechart';\nimport Navbar from './components/navbar/navbar';\nfunction App() {\n\treturn (\n\t\t<div >\n\t\t\t<Router>\n\t\t\t\t<Navbar />\n\t\t\t\t<div >\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route path=\"/coins\" component={CoinsTable} />\n\t\t\t\t\t\t<Route path=\"/exchanges\" component={Exchanges} />\n\t\t\t\t\t\t<Route path=\"/charts\" component={LineChart} />\n\t\t\t\t\t\t<Route path=\"/\">\n\t\t\t\t\t\t\t{/* <Home /> */}\n\t\t\t\t\t\t\t<div>home</div>\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t</Switch>\n\t\t\t\t</div>\n\t\t\t</Router>\n\t\t</div>\n\t);\n}\n\nexport default App;\n",["65","66"],"C:\\Dev\\Rosite\\client\\src\\components\\coins\\CoinsTable.tsx",["67"],"import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { SpinnerContainer, SpinnerOverlay } from \"../spinner/SpinnerComponent.styles\";\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Tabel from './Table';\r\n\r\nexport interface Coins {\r\n    id: string,\r\n    symbol: string,\r\n    name: string\r\n}\r\n\r\ninterface Props {\r\n    isLoading: boolean,\r\n    setIsLoading: (value: boolean) => void;\r\n}\r\nconst CoinsTable: React.FC<Props> = () => {\r\n    const [coins, setCoins] = useState<Coins[]>([]);\r\n    const [namefilter, setNameFilter] = useState<string>('');\r\n    const [filteredCoins, setFilteredCoins] = useState<Coins[]>([]);\r\n    const [symbolfilter, setSymbolfilter] = useState<string>('');\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    useEffect(() => {\r\n        async function getCoins() {\r\n            setIsLoading(true);\r\n            await axios.get('https://api.coingecko.com/api/v3/coins/list').then(response => {\r\n                setCoins(response.data);\r\n                setFilteredCoins(response.data);\r\n                setIsLoading(false);\r\n            });\r\n        }\r\n        getCoins()\r\n    }, [])\r\n\r\n    const filterCoins = () => {\r\n        setFilteredCoins(coins.filter(coin => coin.name.toLowerCase().indexOf(namefilter.toLocaleLowerCase()) !== -1\r\n            && coin.symbol.toLowerCase().indexOf(symbolfilter.toLocaleLowerCase()) !== -1));\r\n    }\r\n    useEffect(() => {\r\n        console.log(namefilter, symbolfilter);\r\n        filterCoins();\r\n    }, [namefilter, symbolfilter])\r\n    return (\r\n        <div>\r\n            {\r\n                isLoading ? (\r\n                    <SpinnerOverlay>\r\n                        <SpinnerContainer />\r\n                    </SpinnerOverlay >) : (\r\n                        <div>\r\n                            <div style={{ display: 'flex', flexDirection: 'row', flex: '0 1 auto', width: '100%' }}>\r\n\r\n                                <Autocomplete\r\n                                    id=\"combo-box-demo\"\r\n                                    options={coins.map(coin => coin.name)}\r\n                                    getOptionLabel={(option) => option}\r\n                                    freeSolo\r\n                                    onChange={(event, newValue) => {\r\n                                        setNameFilter(newValue ? newValue : '');\r\n                                    }}\r\n                                    style={{ width: 300, height: 100, margin: '20px' }}\r\n                                    renderInput={(params) =>\r\n                                        <TextField {...params} label=\"Name\" variant=\"outlined\"\r\n                                            value={namefilter}\r\n                                            onChange={(e) => setNameFilter(e.target.value)}\r\n                                        />}\r\n                                />\r\n                                <Autocomplete\r\n                                    id=\"combo-box-demo\"\r\n                                    options={coins.map(coin => coin.symbol)}\r\n                                    onChange={(event, newValue) => {\r\n                                        setSymbolfilter(newValue ? newValue : '');\r\n                                    }}\r\n                                    getOptionLabel={(option) => option}\r\n                                    freeSolo\r\n                                    style={{ width: 200, height: 100, margin: '20px' }}\r\n                                    renderInput={(params) => <TextField {...params} label=\"Symbol\" variant=\"outlined\" value={symbolfilter}\r\n                                        onChange={(e) => setSymbolfilter(e.target.value)} />}\r\n                                />\r\n                            </div>\r\n\r\n                            {/* <label>nameFilter</label>\r\n                            <input value={namefilter} onChange={(e) => setNameFilter(e.target.value)} /> */}\r\n                            <Tabel rows={filteredCoins} />\r\n                        </div>\r\n\r\n                    )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CoinsTable;\r\n","C:\\Dev\\Rosite\\client\\src\\components\\spinner\\SpinnerComponent.js",[],"C:\\Dev\\Rosite\\client\\src\\components\\spinner\\SpinnerComponent.styles.tsx",[],"C:\\Dev\\Rosite\\client\\src\\components\\exchanges\\Exchanges.tsx",["68"],"import axios from 'axios';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { SpinnerContainer, SpinnerOverlay } from '../spinner/SpinnerComponent.styles';\r\nimport Tabel from './Table';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport TextField from '@material-ui/core/TextField';\r\ninterface iExchanges {\r\n    id: string,\r\n    name: string,\r\n    year_established: number,\r\n    country: string,\r\n    description: string,\r\n    url: string,\r\n    image: string,\r\n    has_trading_incentive: boolean,\r\n    trust_score: number,\r\n    trust_score_rank: number,\r\n    trade_volume_24h_btc: number,\r\n    trade_volume_24h_btc_normalized: number\r\n}\r\n\r\nconst Exchanges: React.FC = () => {\r\n    const [exchanges, setExchanges] = useState<iExchanges[]>([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [filteredExchanges, setFilteredExchanges] = useState<iExchanges[]>([]);\r\n    const [namefilter, setNameFilter] = useState<string>('');\r\n    const [countryFilter, setCountryFilter] = useState<string>('');\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        async function getExchanges() {\r\n            await axios.get('https://api.coingecko.com/api/v3/exchanges?per_page=250').then(response => {\r\n                setExchanges(response.data);\r\n                setFilteredExchanges(response.data)\r\n                setIsLoading(false);\r\n            });\r\n        }\r\n        getExchanges()\r\n    }, [])\r\n\r\n    const filterExchanges = () => {\r\n        console.log(namefilter, countryFilter, exchanges)\r\n        const filteredExchanges = exchanges.filter(exchange =>\r\n            exchange.name &&\r\n            exchange.name.toLowerCase().indexOf(namefilter.toLocaleLowerCase()) !== -1 &&\r\n            exchange.country &&\r\n            exchange.country.toLocaleLowerCase().indexOf(countryFilter.toLocaleLowerCase()) !== -1);\r\n        setFilteredExchanges(filteredExchanges);\r\n    }\r\n    useEffect(() => {\r\n        filterExchanges();\r\n    }, [namefilter, countryFilter])\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                isLoading ? (\r\n                    <SpinnerOverlay>\r\n                        <SpinnerContainer />\r\n                    </SpinnerOverlay >) : (\r\n                        <div>\r\n                            <div style={{ display: 'flex', flexDirection: 'row', flex: '0 1 auto', width: '100%' }}>\r\n\r\n                                <Autocomplete\r\n                                    id=\"combo-box-demo\"\r\n                                    options={exchanges.map(exchange => exchange.name)}\r\n                                    getOptionLabel={(option) => option}\r\n                                    freeSolo\r\n                                    onChange={(event, newValue) => {\r\n                                        setNameFilter(newValue ? newValue : '');\r\n                                    }}\r\n                                    style={{ width: 300, height: 100, margin: '20px' }}\r\n                                    renderInput={(params) =>\r\n                                        <TextField {...params} label=\"Name\" variant=\"outlined\"\r\n                                            value={namefilter}\r\n                                            onChange={(e) => setNameFilter(e.target.value)}\r\n                                        />} />\r\n\r\n                                <Autocomplete\r\n                                    id=\"combo-box-demo\"\r\n                                    options={exchanges.map(exchange => exchange.country ? exchange.country : '')}\r\n                                    getOptionLabel={(option) => option}\r\n                                    freeSolo\r\n                                    onChange={(event, newValue) => {\r\n                                        setNameFilter(newValue ? newValue : '');\r\n                                    }}\r\n                                    style={{ width: 300, height: 100, margin: '20px' }}\r\n                                    renderInput={(params) =>\r\n                                        <TextField {...params} label=\"Country\" variant=\"outlined\"\r\n                                            value={countryFilter}\r\n                                            onChange={(e) => setCountryFilter(e.target.value)}\r\n                                        />} />\r\n\r\n                                </div>\r\n                            <Tabel rows={filteredExchanges} />\r\n                        </div>\r\n\r\n                    )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Exchanges\r\n","C:\\Dev\\Rosite\\client\\src\\index.tsx",[],"C:\\Dev\\Rosite\\client\\src\\reportWebVitals.ts",[],"C:\\Dev\\Rosite\\client\\src\\components\\charts\\linechart\\Linechart.jsx",["69","70","71","72"],"import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Scatter } from \"react-chartjs-2\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {\r\n  SpinnerContainer,\r\n  SpinnerOverlay,\r\n} from \"../../spinner/SpinnerComponent.styles\";\r\n// import useChartConfig from \"../useChartConfig\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Tabel from \"./Table\";\r\nimport { Add } from \"@material-ui/icons\";\r\nexport default function LineChart() {\r\n  const [coinsList, setCoinsList] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [coinsOnGraph, setCoinsOnGraph] = useState([]);\r\n\r\n  const [cryptoDictionary, setCryptoDictionary] = useState({});\r\n  const [searchField, setSearchField] = useState(\"\");\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    async function getCoins() {\r\n      await axios\r\n        .get(\"https://api.coingecko.com/api/v3/coins/list\")\r\n        .then((response) => {\r\n          setCoinsList(response.data.map((coin) => coin.id));\r\n        });\r\n    }\r\n    getCoins();\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const startTime = 1104537600;\r\n  const endTime = new Date().getTime();\r\n\r\n  const addNewCrypto = async (cryptoName) => {\r\n    if (coinsList.indexOf(cryptoName) < 0) {\r\n      alert(\"Invalid value\");\r\n      return;\r\n    }\r\n    if (!(cryptoName in cryptoDictionary)) {\r\n      try {\r\n        await axios\r\n          .get(\r\n            `https://api.coingecko.com/api/v3/coins/${cryptoName}/market_chart/range?vs_currency=usd&from=${startTime}&to=${endTime}`\r\n          )\r\n          .then((response) => {\r\n            var aux = cryptoDictionary;\r\n            aux[cryptoName] = {\r\n              label: cryptoName,\r\n              prices: {\r\n                label: cryptoName,\r\n                datums: response.data[\"prices\"].map((resp) => {\r\n                  return {\r\n                    x: resp[0],\r\n                    y: resp[1],\r\n                  };\r\n                }),\r\n              },\r\n              volumes: {\r\n                label: cryptoName,\r\n                datums: response.data[\"total_volumes\"].map((resp) => {\r\n                  return {\r\n                    x: resp[0],\r\n                    y: resp[1],\r\n                  };\r\n                }),\r\n              },\r\n              market_caps: {\r\n                label: cryptoName,\r\n                datums: response.data[\"market_caps\"].map((resp) => {\r\n                  return {\r\n                    x: resp[0],\r\n                    y: resp[1],\r\n                  };\r\n                }),\r\n              },\r\n            };\r\n            setCryptoDictionary(aux);\r\n            const counter = coinsOnGraph.filter(\r\n              (coin) => coin.label === cryptoName\r\n            );\r\n            if (counter.length === 0) {\r\n              setCoinsOnGraph([...coinsOnGraph, aux[cryptoName]]);\r\n            }\r\n          });\r\n      } catch (error) {\r\n        alert(error);\r\n      }\r\n    } else {\r\n      const counter = coinsOnGraph.filter((coin) => coin.label === cryptoName);\r\n      if (counter.length === 0) {\r\n        setCoinsOnGraph([...coinsOnGraph, cryptoDictionary[cryptoName]]);\r\n      }\r\n    }\r\n\r\n    console.log(cryptoDictionary);\r\n    console.log(coinsOnGraph);\r\n  };\r\n  var data = {};\r\n  useEffect(() => {\r\n    data = {\r\n      labels: [],\r\n      datasets: [],\r\n    };\r\n    // for(var i = 0; i< coinsOnGraph; i++){\r\n    //     data.labels.push(coinsOnGraph[i].label);\r\n    //     data.datasets.push( {\r\n\r\n    //     })\r\n    // }\r\n  }, [coinsOnGraph]);\r\n  const colors = [\r\n    \"aliceblue\",\r\n    \"aqua\",\r\n    \"azure\",\r\n    \"beige\",\r\n    \"brown\",\r\n    \"black\",\r\n    \"blue\",\r\n    \"blueviolet\",\r\n    \"coral\",\r\n    \"cyan\",\r\n    \"darkblue\",\r\n    \"forestgreen\",\r\n    \"fuchsia\",\r\n    \"gold\",\r\n    \"darkturquoise\",\r\n  ];\r\n  var usedColors = [];\r\n  const dataset = {\r\n    datasets: coinsOnGraph.map((coin) => {\r\n      var thisColor = colors[Math.floor(Math.random() * colors.length)];\r\n      while (thisColor in usedColors) {\r\n        thisColor = colors[Math.floor(Math.random() * colors.length)];\r\n      }\r\n      usedColors.push(thisColor);\r\n      return {\r\n        label: coin.label,\r\n        data: coin.prices.datums,\r\n        // pointBackgroundColor: Math.floor(Math.random()*16777215).toString(16),\r\n        pointBorderColor: thisColor,\r\n      };\r\n    }),\r\n  };\r\n  return (\r\n    <div>\r\n      {loading ? (\r\n        <SpinnerOverlay>\r\n          <SpinnerContainer />\r\n        </SpinnerOverlay>\r\n      ) : (\r\n        <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n          <div style={{ width: \"100%\", height: \"400px\" }}>\r\n            {/* <Chart data={data} series={series} axes={axes} tooltip /> */}\r\n            {\r\n                <Scatter data={dataset} width={\"800px\"} height={\"200px\"}  />\r\n            }\r\n          </div>\r\n          <div>\r\n            <div style={{ display: \"flex\", flexDirection: \"row\", marginTop:'80px' }}>\r\n              <Autocomplete\r\n                id=\"combo-box-demo\"\r\n                options={coinsList}\r\n                getOptionLabel={(option) => option}\r\n                freeSolo\r\n                onChange={(event, newValue) => {\r\n                  setSearchField(newValue ? newValue : \"\");\r\n                }}\r\n                style={{ width: 300, height: 100, margin: \"20px\" }}\r\n                renderInput={(params) => (\r\n                  <TextField\r\n                    {...params}\r\n                    label=\"Crypto Name\"\r\n                    variant=\"outlined\"\r\n                    value={searchField}\r\n                    onChange={(e) => setSearchField(e.target.value)}\r\n                  />\r\n                )}\r\n              />\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => addNewCrypto(searchField)}\r\n                style={{ maxHeight: \"50px\", marginTop: \"20px\" }}\r\n              >\r\n                <AddIcon />\r\n              </Button>\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <Tabel rows={coinsOnGraph} setCoinsOnGraph={setCoinsOnGraph} />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n",["73","74"],"C:\\Dev\\Rosite\\client\\src\\components\\charts\\useChartConfig.jsx",[],["75","76"],"C:\\Dev\\Rosite\\client\\src\\components\\navbar\\navbar.js",["77","78","79"],"import React, { Component } from 'react';\r\nimport { Navbar, Nav, Button, Form, Collapse } from 'bootstrap-4-react';\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\nimport { withRouter, Link, NavLink } from 'react-router-dom';\r\n\r\n\r\nconst NavigationBar = ({ location }) => {\r\n    const values = ['Coins', 'Exchanges', 'Charts']\r\n    return (\r\n        <React.Fragment>\r\n            <Navbar expand=\"lg\" dark bg=\"dark\" mb=\"3\">\r\n                <Navbar.Brand href=\"#\">Crypto</Navbar.Brand>\r\n                <Navbar.Toggler target=\"#navbarColor1\" />\r\n                <Collapse navbar id=\"navbarColor1\">\r\n                    <Navbar.Nav mr=\"auto\">\r\n                        {\r\n                            values.map(value =>\r\n                            (\r\n                                 <LinkContainer to={`/${value.toLowerCase()}`}  key={value}>\r\n                                        <Nav.ItemLink>\r\n                                            {value}\r\n                                        </Nav.ItemLink>\r\n                                     </LinkContainer>\r\n                            ))\r\n                        }\r\n                    </Navbar.Nav>\r\n                    <Form inline my=\"2 lg-0\">\r\n                        <Form.Input type=\"search\" placeholder=\"Search\" mr=\"sm-2\" />\r\n                        <Button outline info my=\"2 sm-0\">Search</Button>\r\n                    </Form>\r\n                </Collapse>\r\n            </Navbar>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default withRouter(NavigationBar);","C:\\Dev\\Rosite\\client\\src\\components\\coins\\Table.jsx",[],"C:\\Dev\\Rosite\\client\\src\\components\\exchanges\\Table.jsx",[],"C:\\Dev\\Rosite\\client\\src\\components\\charts\\linechart\\Table.jsx",[],["80","81"],{"ruleId":"82","severity":1,"message":"83","line":1,"column":17,"nodeType":"84","messageId":"85","endLine":1,"endColumn":25},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":43,"column":8,"nodeType":"92","endLine":43,"endColumn":34,"suggestions":"93"},{"ruleId":"90","severity":1,"message":"94","line":52,"column":8,"nodeType":"92","endLine":52,"endColumn":35,"suggestions":"95"},{"ruleId":"96","severity":1,"message":"97","line":4,"column":8,"nodeType":"84","messageId":"85","endLine":4,"endColumn":18},{"ruleId":"96","severity":1,"message":"98","line":15,"column":10,"nodeType":"84","messageId":"85","endLine":15,"endColumn":13},{"ruleId":"96","severity":1,"message":"99","line":105,"column":5,"nodeType":"84","messageId":"85","endLine":105,"endColumn":9},{"ruleId":"90","severity":1,"message":"100","line":105,"column":12,"nodeType":"101","endLine":108,"endColumn":6},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"86","replacedBy":"102"},{"ruleId":"88","replacedBy":"103"},{"ruleId":"96","severity":1,"message":"104","line":1,"column":17,"nodeType":"84","messageId":"85","endLine":1,"endColumn":26},{"ruleId":"96","severity":1,"message":"105","line":4,"column":22,"nodeType":"84","messageId":"85","endLine":4,"endColumn":26},{"ruleId":"96","severity":1,"message":"106","line":4,"column":28,"nodeType":"84","messageId":"85","endLine":4,"endColumn":35},{"ruleId":"86","replacedBy":"107"},{"ruleId":"88","replacedBy":"108"},"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","no-native-reassign",["109"],"no-negated-in-lhs",["110"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'filterCoins'. Either include it or remove the dependency array.","ArrayExpression",["111"],"React Hook useEffect has a missing dependency: 'filterExchanges'. Either include it or remove the dependency array.",["112"],"no-unused-vars","'IconButton' is defined but never used.","'Add' is defined but never used.","'data' is assigned a value but never used.","Assignments to the 'data' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","ObjectExpression",["109"],["110"],"'Component' is defined but never used.","'Link' is defined but never used.","'NavLink' is defined but never used.",["109"],["110"],"no-global-assign","no-unsafe-negation",{"desc":"113","fix":"114"},{"desc":"115","fix":"116"},"Update the dependencies array to be: [filterCoins, namefilter, symbolfilter]",{"range":"117","text":"118"},"Update the dependencies array to be: [namefilter, countryFilter, filterExchanges]",{"range":"119","text":"120"},[1579,1605],"[filterCoins, namefilter, symbolfilter]",[1977,2004],"[namefilter, countryFilter, filterExchanges]"]