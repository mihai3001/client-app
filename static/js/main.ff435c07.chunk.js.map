{"version":3,"sources":["components/spinner/SpinnerComponent.styles.tsx","components/coins/Table.jsx","components/coins/CoinsTable.tsx","components/exchanges/Table.jsx","components/exchanges/Exchanges.tsx","components/charts/linechart/Table.jsx","components/charts/linechart/Linechart.jsx","components/navbar/navbar.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SpinnerOverlay","styled","div","SpinnerContainer","columns","id","label","minWidth","useStyles","makeStyles","root","width","container","maxHeight","StickyHeadTable","rows","classes","React","useState","page","setPage","rowsPerPage","setRowsPerPage","Paper","className","TableContainer","Table","stickyHeader","aria-label","TableHead","TableRow","map","column","TableCell","align","style","TableBody","slice","row","hover","role","tabIndex","value","code","TablePagination","rowsPerPageOptions","component","count","length","onChangePage","event","newPage","onChangeRowsPerPage","target","CoinsTable","coins","setCoins","namefilter","setNameFilter","filteredCoins","setFilteredCoins","symbolfilter","setSymbolfilter","isLoading","setIsLoading","useEffect","a","axios","get","then","response","data","getCoins","console","log","filter","coin","name","toLowerCase","indexOf","toLocaleLowerCase","symbol","display","flexDirection","flex","Autocomplete","options","getOptionLabel","option","freeSolo","onChange","newValue","height","margin","renderInput","params","TextField","variant","e","Exchanges","exchanges","setExchanges","filteredExchanges","setFilteredExchanges","countryFilter","setCountryFilter","getExchanges","exchange","country","filterExchanges","minwidth","LineChart","coinsList","setCoinsList","loading","setLoading","coinsOnGraph","setCoinsOnGraph","cryptoDictionary","setCryptoDictionary","searchField","setSearchField","endTime","Date","getTime","addNewCrypto","cryptoName","alert","aux","prices","datums","resp","x","y","volumes","market_caps","labels","datasets","onClick","index","moneda","withRouter","location","Fragment","expand","dark","bg","mb","Brand","href","Toggler","navbar","Nav","mr","to","ItemLink","inline","my","Input","type","placeholder","outline","info","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ff435c07.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const SpinnerOverlay = styled.div`\r\n  height: 60vh;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const SpinnerContainer = styled.div`\r\n  display: inline-block;\r\n  width: 50px;\r\n  height: 50px;\r\n  border: 3px solid rgba(195, 195, 195, 0.6);\r\n  border-radius: 50%;\r\n  border-top-color: #636767;\r\n  animation: spin 1s ease-in-out infinite;\r\n  -webkit-animation: spin 1s ease-in-out infinite;\r\n  @keyframes spin {\r\n    to {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n  @-webkit-keyframes spin {\r\n    to {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n`;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nconst columns = [\r\n  { id: 'id', label: 'Id', minWidth: 100 },\r\n  { id: 'name', label: 'Name', minWidth: 170 },\r\n  {id: 'symbol', label: 'Symbol', minWidth:100}\r\n];\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  container: {\r\n    maxHeight: 700,\r\n  },\r\n});\r\n\r\nexport default function StickyHeadTable({rows}) {\r\n  const classes = useStyles();\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <TableContainer className={classes.container}>\r\n        <Table stickyHeader aria-label=\"sticky table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              {columns.map((column) => (\r\n                <TableCell\r\n                  key={column.id}\r\n                  align={column.align}\r\n                  style={{ minWidth: column.minWidth }}\r\n                >\r\n                  {column.label}\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n              return (\r\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                  {columns.map((column) => {\r\n                    const value = row[column.id];\r\n                    return (\r\n                      <TableCell key={column.id} align={column.align}>\r\n                        {value}\r\n                      </TableCell>\r\n                    );\r\n                  })}\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePagination\r\n        rowsPerPageOptions={[10, 25, 100]}\r\n        component=\"div\"\r\n        count={rows.length}\r\n        rowsPerPage={rowsPerPage}\r\n        page={page}\r\n        onChangePage={handleChangePage}\r\n        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n      />\r\n    </Paper>\r\n  );\r\n}","import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { SpinnerContainer, SpinnerOverlay } from \"../spinner/SpinnerComponent.styles\";\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Tabel from './Table';\r\n\r\nexport interface Coins {\r\n    id: string,\r\n    symbol: string,\r\n    name: string\r\n}\r\n\r\ninterface Props {\r\n    isLoading: boolean,\r\n    setIsLoading: (value: boolean) => void;\r\n}\r\nconst CoinsTable: React.FC<Props> = () => {\r\n    const [coins, setCoins] = useState<Coins[]>([]);\r\n    const [namefilter, setNameFilter] = useState<string>('');\r\n    const [filteredCoins, setFilteredCoins] = useState<Coins[]>([]);\r\n    const [symbolfilter, setSymbolfilter] = useState<string>('');\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    useEffect(() => {\r\n        async function getCoins() {\r\n            setIsLoading(true);\r\n            await axios.get('https://api.coingecko.com/api/v3/coins/list').then(response => {\r\n                setCoins(response.data);\r\n                setFilteredCoins(response.data);\r\n                setIsLoading(false);\r\n            });\r\n        }\r\n        getCoins()\r\n    }, [])\r\n\r\n    const filterCoins = () => {\r\n        setFilteredCoins(coins.filter(coin => coin.name.toLowerCase().indexOf(namefilter.toLocaleLowerCase()) !== -1\r\n            && coin.symbol.toLowerCase().indexOf(symbolfilter.toLocaleLowerCase()) !== -1));\r\n    }\r\n    useEffect(() => {\r\n        console.log(namefilter, symbolfilter);\r\n        filterCoins();\r\n    }, [namefilter, symbolfilter])\r\n    return (\r\n        <div>\r\n            {\r\n                isLoading ? (\r\n                    <SpinnerOverlay>\r\n                        <SpinnerContainer />\r\n                    </SpinnerOverlay >) : (\r\n                        <div>\r\n                            <div style={{ display: 'flex', flexDirection: 'row', flex: '0 1 auto', width: '100%' }}>\r\n\r\n                                <Autocomplete\r\n                                    id=\"combo-box-demo\"\r\n                                    options={coins.map(coin => coin.name)}\r\n                                    getOptionLabel={(option) => option}\r\n                                    freeSolo\r\n                                    onChange={(event, newValue) => {\r\n                                        setNameFilter(newValue ? newValue : '');\r\n                                    }}\r\n                                    style={{ width: 300, height: 100, margin: '20px' }}\r\n                                    renderInput={(params) =>\r\n                                        <TextField {...params} label=\"Name\" variant=\"outlined\"\r\n                                            value={namefilter}\r\n                                            onChange={(e) => setNameFilter(e.target.value)}\r\n                                        />}\r\n                                />\r\n                                <Autocomplete\r\n                                    id=\"combo-box-demo\"\r\n                                    options={coins.map(coin => coin.symbol)}\r\n                                    onChange={(event, newValue) => {\r\n                                        setSymbolfilter(newValue ? newValue : '');\r\n                                    }}\r\n                                    getOptionLabel={(option) => option}\r\n                                    freeSolo\r\n                                    style={{ width: 200, height: 100, margin: '20px' }}\r\n                                    renderInput={(params) => <TextField {...params} label=\"Symbol\" variant=\"outlined\" value={symbolfilter}\r\n                                        onChange={(e) => setSymbolfilter(e.target.value)} />}\r\n                                />\r\n                            </div>\r\n\r\n                            {/* <label>nameFilter</label>\r\n                            <input value={namefilter} onChange={(e) => setNameFilter(e.target.value)} /> */}\r\n                            <Tabel rows={filteredCoins} />\r\n                        </div>\r\n\r\n                    )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CoinsTable;\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nconst columns = [\r\n  { id: 'id', label: 'Id', minWidth: 100 },\r\n  { id: 'name', label: 'Name', minWidth: 170 },\r\n  {id: 'year_established', label: 'Year Established', minWidth:100},\r\n  {id: 'country', label: 'Country', minWidth:150},\r\n  {id: 'trust_score', label: 'Trust score', minWidth:100},\r\n  {id: 'trust_score_rank', label: 'Trust score rank', minWidth:100},\r\n];\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  container: {\r\n    maxHeight: 700,\r\n  },\r\n});\r\n\r\nexport default function StickyHeadTable({rows}) {\r\n  const classes = useStyles();\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <TableContainer className={classes.container}>\r\n        <Table stickyHeader aria-label=\"sticky table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              {columns.map((column) => (\r\n                <TableCell\r\n                  key={column.id}\r\n                  align={column.align}\r\n                  style={{ minWidth: column.minWidth }}\r\n                >\r\n                  {column.label}\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n              return (\r\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                  {columns.map((column) => {\r\n                    const value = row[column.id];\r\n                    return (\r\n                      <TableCell key={column.id} align={column.align}>\r\n                        {value}\r\n                      </TableCell>\r\n                    );\r\n                  })}\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePagination\r\n        rowsPerPageOptions={[10, 25, 100]}\r\n        component=\"div\"\r\n        count={rows.length}\r\n        rowsPerPage={rowsPerPage}\r\n        page={page}\r\n        onChangePage={handleChangePage}\r\n        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n      />\r\n    </Paper>\r\n  );\r\n}","import axios from 'axios';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { SpinnerContainer, SpinnerOverlay } from '../spinner/SpinnerComponent.styles';\r\nimport Tabel from './Table';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport TextField from '@material-ui/core/TextField';\r\ninterface iExchanges {\r\n    id: string,\r\n    name: string,\r\n    year_established: number,\r\n    country: string,\r\n    description: string,\r\n    url: string,\r\n    image: string,\r\n    has_trading_incentive: boolean,\r\n    trust_score: number,\r\n    trust_score_rank: number,\r\n    trade_volume_24h_btc: number,\r\n    trade_volume_24h_btc_normalized: number\r\n}\r\n\r\nconst Exchanges: React.FC = () => {\r\n    const [exchanges, setExchanges] = useState<iExchanges[]>([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [filteredExchanges, setFilteredExchanges] = useState<iExchanges[]>([]);\r\n    const [namefilter, setNameFilter] = useState<string>('');\r\n    const [countryFilter, setCountryFilter] = useState<string>('');\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        async function getExchanges() {\r\n            await axios.get('https://api.coingecko.com/api/v3/exchanges?per_page=250').then(response => {\r\n                setExchanges(response.data);\r\n                setFilteredExchanges(response.data)\r\n                setIsLoading(false);\r\n            });\r\n        }\r\n        getExchanges()\r\n    }, [])\r\n\r\n    const filterExchanges = () => {\r\n        console.log(namefilter, countryFilter, exchanges)\r\n        const filteredExchanges = exchanges.filter(exchange =>\r\n            exchange.name &&\r\n            exchange.name.toLowerCase().indexOf(namefilter.toLocaleLowerCase()) !== -1 &&\r\n            exchange.country &&\r\n            exchange.country.toLocaleLowerCase().indexOf(countryFilter.toLocaleLowerCase()) !== -1);\r\n        setFilteredExchanges(filteredExchanges);\r\n    }\r\n    useEffect(() => {\r\n        filterExchanges();\r\n    }, [namefilter, countryFilter])\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                isLoading ? (\r\n                    <SpinnerOverlay>\r\n                        <SpinnerContainer />\r\n                    </SpinnerOverlay >) : (\r\n                        <div>\r\n                            <div style={{ display: 'flex', flexDirection: 'row', flex: '0 1 auto', width: '100%' }}>\r\n\r\n                                <Autocomplete\r\n                                    id=\"combo-box-demo\"\r\n                                    options={exchanges.map(exchange => exchange.name)}\r\n                                    getOptionLabel={(option) => option}\r\n                                    freeSolo\r\n                                    onChange={(event, newValue) => {\r\n                                        setNameFilter(newValue ? newValue : '');\r\n                                    }}\r\n                                    style={{ width: 300, height: 100, margin: '20px' }}\r\n                                    renderInput={(params) =>\r\n                                        <TextField {...params} label=\"Name\" variant=\"outlined\"\r\n                                            value={namefilter}\r\n                                            onChange={(e) => setNameFilter(e.target.value)}\r\n                                        />} />\r\n\r\n                                <Autocomplete\r\n                                    id=\"combo-box-demo\"\r\n                                    options={exchanges.map(exchange => exchange.country ? exchange.country : '')}\r\n                                    getOptionLabel={(option) => option}\r\n                                    freeSolo\r\n                                    onChange={(event, newValue) => {\r\n                                        setNameFilter(newValue ? newValue : '');\r\n                                    }}\r\n                                    style={{ width: 300, height: 100, margin: '20px' }}\r\n                                    renderInput={(params) =>\r\n                                        <TextField {...params} label=\"Country\" variant=\"outlined\"\r\n                                            value={countryFilter}\r\n                                            onChange={(e) => setCountryFilter(e.target.value)}\r\n                                        />} />\r\n\r\n                                </div>\r\n                            <Tabel rows={filteredExchanges} />\r\n                        </div>\r\n\r\n                    )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Exchanges\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nconst columns = [\r\n  { id: \"id\", label: \"Id\", minWidth: 100 },\r\n  { id: \"delete\", label: \"delete\", minwidth: 50 },\r\n];\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  container: {\r\n    maxHeight: 700,\r\n  },\r\n});\r\n\r\nexport default function StickyHeadTable({ rows }) {\r\n  const classes = useStyles();\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <TableContainer className={classes.container}>\r\n        <Table stickyHeader aria-label=\"sticky table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              {columns.map((column) => (\r\n                <TableCell\r\n                  key={column.id}\r\n                  align={column.align}\r\n                  style={{ minWidth: column.minWidth }}\r\n                >\r\n                  {column.label}\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows\r\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n              .map((row) => {\r\n                return (\r\n                  <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.id}>\r\n                    <TableCell key={row}>\r\n                      {row.id}\r\n                    </TableCell>\r\n                    <TableCell key={row}>\r\n                      <DeleteIcon />\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePagination\r\n        rowsPerPageOptions={[10, 25, 100]}\r\n        component=\"div\"\r\n        count={rows.length}\r\n        rowsPerPage={rowsPerPage}\r\n        page={page}\r\n        onChangePage={handleChangePage}\r\n        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n      />\r\n    </Paper>\r\n  );\r\n}\r\n","import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Chart } from \"react-charts\";\r\nimport { Line } from \"react-charts\";\r\nimport { keyframes } from \"styled-components\";\r\nimport {\r\n  SpinnerContainer,\r\n  SpinnerOverlay,\r\n} from \"../../spinner/SpinnerComponent.styles\";\r\n// import useChartConfig from \"../useChartConfig\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Tabel from './Table'\r\nexport default function LineChart() {\r\n  const [coinsList, setCoinsList] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [coinsOnGraph, setCoinsOnGraph] = useState([]);\r\n\r\n  const [cryptoDictionary, setCryptoDictionary] = useState({});\r\n  const [searchField, setSearchField] = useState(\"\");\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    async function getCoins() {\r\n      await axios\r\n        .get(\"https://api.coingecko.com/api/v3/coins/list\")\r\n        .then((response) => {\r\n          setCoinsList(response.data.map((coin) => coin.id));\r\n        });\r\n    }\r\n    getCoins();\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const startTime = 1104537600;\r\n  const endTime = new Date().getTime();\r\n\r\n  const addNewCrypto = async (cryptoName) => {\r\n    if (coinsList.indexOf(cryptoName) < 0) {\r\n      alert(\"Invalid value\");\r\n      return;\r\n    }\r\n    if (!(cryptoName in cryptoDictionary)) {\r\n      try {\r\n        await axios\r\n          .get(\r\n            `https://api.coingecko.com/api/v3/coins/${cryptoName}/market_chart/range?vs_currency=usd&from=${startTime}&to=${endTime}`\r\n          )\r\n          .then((response) => {\r\n            var aux = cryptoDictionary;\r\n            aux[cryptoName] = {\r\n              label: cryptoName,\r\n              prices: {\r\n                label: cryptoName,\r\n                datums: response.data[\"prices\"].map((resp) => {\r\n                  return {\r\n                    x: resp[0],\r\n                    y: resp[1],\r\n                  };\r\n                }),\r\n              },\r\n              volumes: {\r\n                label: cryptoName,\r\n                datums: response.data[\"total_volumes\"].map((resp) => {\r\n                  return {\r\n                    x: resp[0],\r\n                    y: resp[1],\r\n                  };\r\n                }),\r\n              },\r\n              market_caps: {\r\n                label: cryptoName,\r\n                datums: response.data[\"market_caps\"].map((resp) => {\r\n                  return {\r\n                    x: resp[0],\r\n                    y: resp[1],\r\n                  };\r\n                }),\r\n              },\r\n            };\r\n            setCryptoDictionary(aux);\r\n            const counter = coinsOnGraph.filter(\r\n              (coin) => coin.label === cryptoName\r\n            );\r\n            if (counter.length === 0) {\r\n              setCoinsOnGraph([...coinsOnGraph, aux[cryptoName]]);\r\n            }\r\n          });\r\n      } catch (error) {\r\n        alert(error);\r\n      }\r\n    } else {\r\n      const counter = coinsOnGraph.filter((coin) => coin.label === cryptoName);\r\n      if (counter.length === 0) {\r\n        setCoinsOnGraph([...coinsOnGraph, cryptoDictionary[cryptoName]]);\r\n      }\r\n    }\r\n\r\n    console.log(cryptoDictionary);\r\n    console.log(coinsOnGraph);\r\n  };\r\n  var data = {};\r\n  useEffect(() => {\r\n    data = {\r\n      labels: [],\r\n      datasets: [],\r\n    };\r\n    // for(var i = 0; i< coinsOnGraph; i++){\r\n    //     data.labels.push(coinsOnGraph[i].label);\r\n    //     data.datasets.push( {\r\n\r\n    //     })\r\n    // }\r\n  }, [coinsOnGraph]);\r\n\r\n  return (\r\n    <div>\r\n      {loading ? (\r\n        <SpinnerOverlay>\r\n          <SpinnerContainer />\r\n        </SpinnerOverlay>\r\n      ) : (\r\n        <div>\r\n          {/* <div style={{ width: \"100%\", height: \"500px\" }}>\r\n            <Chart data={data} series={series} axes={axes} tooltip />\r\n            {cryptoDictionary[\"bitcoin\"] && (\r\n              <div\r\n                style={{\r\n                  width: \"100px\",\r\n                  height: \"100px\",\r\n                  backgroundColor: \"blue\",\r\n                }}\r\n              >\r\n                <Line />\r\n              </div>\r\n            )}\r\n          </div> */}\r\n          <Autocomplete\r\n            id=\"combo-box-demo\"\r\n            options={coinsList}\r\n            getOptionLabel={(option) => option}\r\n            freeSolo\r\n            onChange={(event, newValue) => {\r\n              setSearchField(newValue ? newValue : \"\");\r\n\t\t\t}}\r\n            style={{ width: 300, height: 100, margin: \"20px\" }}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                label=\"Crypto Name\"\r\n                variant=\"outlined\"\r\n\t\t\t\tvalue={searchField}\r\n                onChange={(e) => setSearchField(e.target.value)}\r\n              />\r\n            )}\r\n          />\r\n          <button onClick={() => addNewCrypto(searchField)}>\r\n            Add to chart\r\n          </button>\r\n\t\t  <Tabel rows = {coinsOnGraph}/>\r\n          {coinsOnGraph.map((coin, index) => {\r\n\r\n            return (\r\n              <div id={coin.label}>\r\n                <h5>{coin.label}</h5>\r\n                <button\r\n                  onClick={() =>\r\n                    setCoinsOnGraph(\r\n                      coinsOnGraph.filter(\r\n                        (moneda) => moneda.label !== coin.label\r\n                      )\r\n                    )\r\n                  }\r\n                >\r\n                  Delete\r\n                </button>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Navbar, Nav, Button, Form, Collapse } from 'bootstrap-4-react';\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\nimport { withRouter, Link, NavLink } from 'react-router-dom';\r\n\r\n\r\nconst NavigationBar = ({ location }) => {\r\n    const values = ['Coins', 'Exchanges', 'Charts']\r\n    return (\r\n        <React.Fragment>\r\n            <Navbar expand=\"lg\" dark bg=\"dark\" mb=\"3\">\r\n                <Navbar.Brand href=\"#\">Crypto</Navbar.Brand>\r\n                <Navbar.Toggler target=\"#navbarColor1\" />\r\n                <Collapse navbar id=\"navbarColor1\">\r\n                    <Navbar.Nav mr=\"auto\">\r\n                        {\r\n                            values.map(value =>\r\n                            (\r\n                                 <LinkContainer to={`/${value.toLowerCase()}`}  key={value}>\r\n                                        <Nav.ItemLink>\r\n                                            {value}\r\n                                        </Nav.ItemLink>\r\n                                     </LinkContainer>\r\n                            ))\r\n                        }\r\n                    </Navbar.Nav>\r\n                    <Form inline my=\"2 lg-0\">\r\n                        <Form.Input type=\"search\" placeholder=\"Search\" mr=\"sm-2\" />\r\n                        <Button outline info my=\"2 sm-0\">Search</Button>\r\n                    </Form>\r\n                </Collapse>\r\n            </Navbar>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default withRouter(NavigationBar);","import React, { useState } from 'react';\nimport {\n\tBrowserRouter as Router,\n\tSwitch,\n\tRoute,\n} from \"react-router-dom\";\nimport CoinsTable from './components/coins/CoinsTable';\nimport Exchanges from './components/exchanges/Exchanges';\nimport LineChart from './components/charts/linechart/Linechart';\nimport Navbar from './components/navbar/navbar';\nfunction App() {\n\treturn (\n\t\t<div >\n\t\t\t<Router>\n\t\t\t\t<Navbar />\n\t\t\t\t<div >\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route path=\"/coins\" component={CoinsTable} />\n\t\t\t\t\t\t<Route path=\"/exchanges\" component={Exchanges} />\n\t\t\t\t\t\t<Route path=\"/charts\" component={LineChart} />\n\t\t\t\t\t\t<Route path=\"/\">\n\t\t\t\t\t\t\t{/* <Home /> */}\n\t\t\t\t\t\t\t<div>home</div>\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t</Switch>\n\t\t\t\t</div>\n\t\t\t</Router>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport '@devexpress/dx-react-grid-bootstrap4/dist/dx-react-grid-bootstrap4.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}